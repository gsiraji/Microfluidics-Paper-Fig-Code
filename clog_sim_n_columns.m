% clog_sim_n_columns.m generates versions of figures 3 and 7. This file performs stochastic simulation of clogging for constant total flow and constant
%pressure difference. Collects the clogging time and fraction of clogged
%channels at the time of clogging and creates plots. The case of constant
%total flow rate (c_mode == 0) requires the files 'nb_cf_theory_qQ0.xlsx' and 'nb_cf_theory_q2Q0.xlsx' generated by
%running the mathematica notebook 'cf_hybrid_n_columns.nb'


close all; clear all;
syms  z(x) t %set up the symbolic function for the mean-field equation

c_mode = 0; % device conditions, 0 for consant flow, 1 for constant p

table1 = table;  % initialize the table of simulation data \lambda = q/Q0(1-q/(2Q0))
table2 = table;  % initialize the table of simulation data \lambda = q/Q0
table3 = table;  % initialize the table of simulation data \lambda = m*(q^2/Q0^2)

for lambdatype = 1:1:3
    
    % initialize the temperorary table of simulation data
    temptable = table;
       



    for k1 = 256% [1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80,90,100,200,300,400,500 ] 
            for k2 =  1:1:10 %plot for different columns and rows 


                Ntrials = 300; %number of trials
                N = 10000; %number of timesteps
                T = 2000; %final endpoint for time
                dt = T/N; %timestep size
                tvec = 0:dt:T; %time vector


                m = k1; %number of rows
                n = k2 %number of columns
                Q0 = 200; % initial total flow (for a constant total flow device) 
                P = 200; % initial pressure (for a constant pressure device)
                N0 = m*n;    % total number of channels
                e1 = (1/m);  % epsilon

                Gmat = ones(m,n); %matrix of conductances, scaled to 1 here
                Qmat = ones(m,n); % placeholder for the matrix of channel flows

                fvec  = zeros(N,1);  % fraction of clogged channels at each time step
                lamb = zeros(N,1); %lambda at each time step
                mask = ones(m,n); %matrix of channels, 0 for clogged channels, 1 for open channels
                Gsum = sum(mask.*Gmat,1); % column conductances
                G = 1/sum(Gsum.^-1); % net conductance

                Tclog = zeros(Ntrials,1); % initialize the array for the time of clogging
                fclog = zeros(Ntrials,1); % initialize the array for the fraction of clogged channels at the time of clogging
                if c_mode == 1
                   % 'init flow is'
                    Q0 =P*G; %cp
                else
                 %   'init P is'
                    P = Q0/G; %cf

                end
                for trial = 1:Ntrials
                    mask = ones(m,n); %matrix of clogged channels



                    for step=1:N

                       Gsum = sum(mask.*Gmat,1); %recalculate the conductance for each column
                       G = 1/(sum(1./Gsum)); %recalculate the conductance for the device
                       fvec(step) = (N0 - nnz(mask))/N0; %calculate the fraction of clogged channels at this time step


                        if find(all(mask==0))>0 %  see if there is a column that is completely clogged

                            Tclog(trial) = dt*(step-1); % store time to complete clog
                            fclog(trial) = fvec(step);  % store the fraction of clogged channels at the time of clogging

                            break
                        end


                        if c_mode == 1 %constant pressure
                            for column_i = 1:1:n
                                Qmat(1:m,column_i) = G*P./repmat(nnz(mask(1:m,column_i)),m,1);
                            end
                        else
                            for column_i = 1:1:n %constant flow
                                Qmat(1:m,column_i) = Q0./repmat(nnz(mask(1:m,column_i)),m,1);
                            end
                        end
                        q0 = Q0/m;


                        fvec(step) = (N0 - nnz(mask))/N0; %store the number of clogged channels at this time step

                       randmat = rand(m,n); %create a random matrix
                    
                       
                       % choose lambda appropriately for each case
                        if lambdatype == 1
                        lambda = (Qmat./Q0).*(1.-Qmat./(2*Q0)).*mask;
                        probs = dt.*lambda;
                        else 
                            if lambdatype == 2
                                lambda = (Qmat./Q0).*mask;
                                probs = dt.*lambda;
                            else
                                lambda = m.*(Qmat./Q0).^2.*mask;
                                probs = dt.*lambda;
                            end
                        end


                   mask(randmat<probs) = 0; %clog the channels according to their probability of clogging
                    end
                end


                    if lambdatype == 1
                        temptable = table([mean(Tclog),mean(fclog),std(Tclog),std(fclog),T,N,m,n,Ntrials,Q0]);
                        table1 = [table1;temptable];
                        else 
                            if lambdatype == 2
                                temptable = table([mean(Tclog),mean(fclog),std(Tclog),std(fclog),T,N,m,n,Ntrials,Q0]);
                                table2 = [table2;temptable];
                            else
                                temptable = table([mean(Tclog),mean(fclog),std(Tclog),std(fclog),T,N,m,n,Ntrials,Q0]);
                                table3 = [table3;temptable];
                            end
                    end


            end
    end
end
%% create the plots for Tclog and fclog

if c_mode == 0
    % the plot for the constant flow rate case
    
    % read and store the theoretic data from the Excel sheets
    Tq2exact = table2array(readtable('nb_cf_theory_q2Q0.xlsx','Sheet',1));
    Tqexact = table2array(readtable('nb_cf_theory_qQ0.xlsx','Sheet',1));

    Tqq_1 = table2array(table1); 
    Tq2 = table2array(table2);
    Tq = table2array(table3);




    % create the labels for the legend
    label1 = 'stochastic, $\lambda = \alpha \tilde{q}(1-\tilde{q}/2)$';
    label2 = 'stochastic, $\lambda =  \alpha m \tilde{q}^2$';
    label3 = 'stochastic, $\lambda =  \alpha \tilde{q}$';
    label22 = 'theory, \hspace{0.41cm}    $\lambda =  \alpha m \tilde{q}^2$';
    label33 = 'theory,  \hspace{0.41cm}  $\lambda =  \alpha \tilde{q}$';

    fontsz = 12; %set the font size for the plot
    markersz = [5,6]; %set the marker sizes for the plot
    tilez = tiledlayout(2,1); %set up the tiles for the plot

    %%%% Tclog plot
    % Tile 1
    at1 = nexttile;
    % %%%%lambda = q(1-q) plot
    % stochastic data error bars
    errorbar(Tqq_1(:,8),Tqq_1(:,1), Tqq_1(:,3), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none');
    hold on;
    % stochastic data points
    plot(Tqq_1(:,8),Tqq_1(:,1), 'o','MarkerSize', markersz(2), 'MarkerEdgeColor',[0 .95 .95],'MarkerFaceColor',[0 .95 .95], 'DisplayName', label1)
    hold on;
    % %%%%lambda = q plot
    % exact solution
    plot(Tqexact(:,1), Tqexact(:,2), '--', 'lineWidth', 3,'Color','m', 'DisplayName', label33)
    hold on;
    % stochastic error bars 
    errorbar(Tq(:,8),Tq(:,1), Tq(:,3), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none');
    hold on;
    % stochastic data points
    plot(Tq(:,8),Tq(:,1), '^','MarkerSize', markersz(1),'MarkerEdgeColor',[0.4940 0.1840 0.5560],'MarkerFaceColor',[0.4940 0.1840 0.5560], 'DisplayName', label3)
    hold on;
    % %%%%lambda = q^2 plot
    % stochastic data points
    plot(Tq2exact(:,1), Tq2exact(:,2),'-.', 'lineWidth', 3, 'Color', [0.6350 0.0780 0.1840],'DisplayName', label22) ;
    hold on;
    % stochastic data error bars
    errorbar(Tq2(:,8),Tq2(:,1), Tq2(:,3), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none');
    hold on;
    plot(Tq2(:,8),Tq2(:,1), 'd','MarkerSize', markersz(1), 'MarkerEdgeColor','r','MarkerFaceColor','r', 'DisplayName', label2)





    % set the plot legend and axis labels
    legend( 'Interpreter','latex','Color','none','EdgeColor',[0.5 0.5 0.5] );
    legend(  'Location', 'best', 'FontSize',fontsz );
    xlabel('$n$','Interpreter','latex');
    ylabel('$ T_\textbf{clog} $ (a.u.) ','Interpreter','latex');
    set(gca, 'fontsize', fontsz);
    set(gca, 'fontName','Times New Roman');
    set(gca, 'YScale', 'log')
    set(gca, 'XScale', 'log')


    % f plot  
      % Tile 2
    at2 = nexttile;  

      % lambda = q(1-q) plot, stochastic
      % plot the error bars for this data set
    errorbar(Tqq_1(:,8),Tqq_1(:,2), Tqq_1(:,4), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none');
    hold on;
    plot(Tqq_1(:,8),Tqq_1(:,2), 'o','MarkerSize', markersz(2), 'MarkerEdgeColor',[0 .95 .95],'MarkerFaceColor',[0 .95 .95], 'DisplayName', label1)
    hold on;

    % lambda = q plot, stochastic
    % plot the error bars for this data set
    errorbar(Tq(:,8),Tq(:,2), Tq(:,4), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none');
    hold on;
    plot(Tq(:,8),Tq(:,2), '^','MarkerSize', markersz(1),'MarkerEdgeColor',[0.4940 0.1840 0.5560],'MarkerFaceColor',[0.4940 0.1840 0.5560], 'DisplayName', label3)
    hold on;

    % lambda = q^2 plot, stochastic
    % stochastic data error bars
    errorbar(Tq2(:,8),Tq2(:,2), Tq2(:,4),'.','HandleVisibility','off', 'MarkerEdgeColor', 'none');
    hold on
    plot(Tq2(:,8),Tq2(:,2), 'd','MarkerSize', markersz(1), 'MarkerEdgeColor','r','MarkerFaceColor','r', 'DisplayName', label2)



    % set up the figure legend, axes labels, and axes scale 
    legend( 'Interpreter','latex','Color','none','EdgeColor',[0.5 0.5 0.5] );
    legend(  'Location', 'SouthWest' , 'FontSize',fontsz );
    xlabel('$n$','Interpreter','latex');
    ylabel('$ f_\textbf{clog} $','Interpreter','latex');
    set(gca, 'fontsize', fontsz);
    set(gca, 'fontName','Times New Roman');
    %  set(gca, 'YScale', 'log')
    set(gca, 'XScale', 'log')

    % remove the extra white space
    tilez.TileSpacing = 'none';
    tilez.Padding = 'compact';
else
    % the plot for the constant pressure case
    
    
    % read and store the stochastic data from the tables
    Tqq_1 = table2array(table1);
    Tq = table2array(table2);
    Tq2 = table2array(table3);
    % store the Tclog values
    Tclog1 = Tqq_1(:,1);
    Tclog2 = Tq2(:,1);
    Tclog3 = Tq(:,1);
    % get the length of the vectors
    vl = length(Tclog1);
    % Extract the number of columns from the table
    nset = Tqq_1(:,8);
    

    % solve the mean-field equations to get the semi-analytic results for f
    qtilde = 1/m;
    fsa1 = zeros(vl,1); % initialize the vector for semi-analytic f
    fsa2 = zeros(vl,1); % initialize the vector for semi-analytic f
    fsa3 = zeros(vl,1); % initialize the vector for semi-analytic f
    Ttheory = zeros(100,2); % initialize the vector for exact mean time of clogging from prob theory for independent channels
    lamb_theo1 = 1/(m)*(1-1/(2*m)); % set up the clogging rate function
    lamb_theo2 = 1/m;% set up the clogging rate function
    lamb_theo3 = 1/m;% set up the clogging rate function
    eqns1 = diff(z,x) == lamb_theo1*(1-z); 
    eqns2 = diff(z,x) == lamb_theo2*(1-z);
    eqns3 = diff(z,x) == lamb_theo3*(1-z);
    conds = z(0) == 0; % set the initial conditions
    S1 = matlabFunction(dsolve(eqns1 , conds));
    S2 = matlabFunction(dsolve(eqns2 , conds));
    S3 = matlabFunction(dsolve(eqns3 , conds));

    % calculate
    for n = 1:1:100	
        lambtheory = qtilde;% prob of failure, constant
        Rp = 1 - (1-exp(-lambtheory*t))^m ;
        R = Rp^n;
        R = matlabFunction(R) ;
        Ttheory(n,2) = quadgk(R,0,inf);
        Ttheory(n,1) = n; 


    % 	lambtheory3 = m.*qtilde.^2;% prob of failure, constant
        if n < length(nset)+1
            fsa1(n,1) = S1(Tclog1(n,1));
            fsa2(n,1) = S2(Tclog2(n,1));
            fsa3(n,1) = S3(Tclog3(n,1));
        end
    end

    %%
    % create a plot of Tclog and f
    label1 = 'stochastic, $\lambda = \alpha \tilde{q}(1-\tilde{q}/2)$';
    label2 = 'stochastic, $\lambda =  \alpha m \tilde{q}^2$';
    label3 = 'stochastic, $\lambda =  \alpha \tilde{q}$';
    label4 = 'exact,\hspace{0.6cm} $  \lambda =$ const.';

    label10 = 'stochastic, $ \hspace{0.5cm}  \lambda = \alpha \tilde{q}(1-\tilde{q}/2)$';
    label20 = 'stochastic, $ \hspace{0.5cm}  \lambda =  \alpha m \tilde{q}^2$';
    label30 = 'stochastic, $ \hspace{0.5cm}  \lambda =  \alpha \tilde{q}$';
    label40 = 'exact, $ \hspace{0.95cm}  \lambda =$ const.';



    label11 = 'semi-analytic, $\lambda =  \alpha \tilde{q}(1-\tilde{q}/2)$';
    label22 = 'semi-analytic, $ \lambda =  \alpha m \tilde{q}^2$';
    label33 = 'semi-analytic, $ \lambda =  \alpha \tilde{q}$';


    markersz = [7,5];
    tilez = tiledlayout(2,1);

    %%%% Tclog plot
    % Tile 1
    at1 = nexttile;
    plot(Ttheory(:,1),Ttheory(:,2), '-k', 'lineWidth', 2, 'DisplayName', label4)
    hold on; 
    errorbar(Tqq_1(:,8),Tqq_1(:,1), Tqq_1(:,3), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none', 'color','r');
    hold on;

    plot(Tqq_1(:,8),Tqq_1(:,1), 'o','MarkerSize', markersz(1), 'MarkerEdgeColor','r','MarkerFaceColor','none', 'DisplayName', label1)%[0 .95 .95][0.4940 0.1840 0.5560]
    hold on;
    plot(Tq(:,8),Tq(:,1), 'd','MarkerSize', markersz(2),'MarkerEdgeColor','b','MarkerFaceColor','b', 'DisplayName', label3)
    hold on;


    errorbar(Tq2(:,8),Tq2(:,1), Tq2(:,3), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none','color','m');
    hold on;

    plot(Tq2(:,8),Tq2(:,1), '^','MarkerSize', markersz(2), 'MarkerEdgeColor','m','MarkerFaceColor','m', 'DisplayName', label2)
    hold on;
    errorbar(Tq(:,8),Tq(:,1), Tq(:,3), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none','color','b');






    legend( 'Interpreter','latex','Color','none','EdgeColor','none' );
    legend(  'Location', 'bestoutside', 'FontSize',16 );
    xlabel('$n$','Interpreter','latex');
    ylabel('$ T_\textbf{clog} $ (a.u.) ','Interpreter','latex');
    set(gca, 'fontsize', 16);
     set(gca, 'fontName','Times New Roman');
     set(gca, 'YScale', 'log')
     set(gca, 'XScale', 'log')
    % ylim([0 1800])
    % axis 'tight'  
    % f plot  
      % Tile 2
    at2 = nexttile;  






    plot(Tqq_1(:,8),Tqq_1(:,2), 'o','MarkerSize', markersz(1), 'MarkerEdgeColor','r','MarkerFaceColor','none', 'DisplayName', label10)
    hold on;
    errorbar(Tqq_1(:,8),Tqq_1(:,2), Tqq_1(:,4), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none','color','r');
    hold on;
    plot(nset,fsa1(:,1), '-', 'lineWidth', 1, 'Color', [0.6350 0.0780 0.1840] , 'DisplayName', label11)
    hold on;
    plot(Tq(:,8),Tq(:,2), 'd','MarkerSize', markersz(2),'MarkerEdgeColor','b','MarkerFaceColor','b', 'DisplayName', label30)
    hold on;
    errorbar(Tq(:,8),Tq(:,2), Tq(:,4), '.','HandleVisibility','off', 'MarkerEdgeColor', 'none','color','b');
    hold on;
    plot(nset,fsa3(:,1), '--', 'lineWidth', 3,'Color',[0 0.4470 0.7410], 'DisplayName', label33)
    hold on;
    plot(Tq2(:,8),Tq2(:,2), '^','MarkerSize', markersz(2), 'MarkerEdgeColor','m','MarkerFaceColor','m', 'DisplayName', label20)
    hold on;
    errorbar(Tq2(:,8),Tq2(:,2), Tq2(:,4),'.','HandleVisibility','off', 'MarkerEdgeColor', 'none','color','m');
    hold on;
    plot(nset,fsa2(:,1), '-.', 'lineWidth', 3, 'Color','#7E2F8E' ,'DisplayName', label22)






    legend( 'Interpreter','latex','Color','none','EdgeColor','none' );
    legend(  'Location', 'bestoutside' , 'FontSize',16 );
    xlabel('$n$','Interpreter','latex');
    ylabel('$ f_\textbf{clog} $','Interpreter','latex');
    set(gca, 'fontsize', 16);
     set(gca, 'fontName','Times New Roman');
    %  set(gca, 'YScale', 'log')
     set(gca, 'XScale', 'log')
    ylim([0 1])

     tilez.TileSpacing = 'none';
      tilez.Padding = 'compact';
      
      
end












